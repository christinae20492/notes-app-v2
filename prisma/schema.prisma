// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String @db.Uuid
  type              String  
  provider          String 
  providerAccountId String 
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?  
  token_type        String?
  scope             String?
  id_token          String? @db.Text 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique 
  userId       String   @db.Uuid
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {

  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  email     String   @unique
  username      String @unique
  password String
  notes        Note[]
  folders      Folder[]


  session Session[]

  account Account[]
}

model Folder {
  id           String    @id @default(uuid()) @db.Uuid
  title        String
  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt 

  userId       String    @db.Uuid 
  user         User      @relation(fields: [userId], references: [id])

  notes        Note[]   

  @@unique([title, userId])
}

model Note {
  id           String    @id @default(uuid()) @db.Uuid
  title        String
  body         String
  color        String
  category     String
  tag          String
  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  isTrash      Boolean   @default(false)

  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id])

  folderId     String?   @map("folder_id") @db.Uuid
  folder       Folder?   @relation(fields: [folderId], references: [id])

  @@unique([title, userId, folderId])
}
